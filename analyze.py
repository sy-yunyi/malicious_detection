'''
@Descripttion: 
@version: 
@Author: Six
@Date: 2019-12-29 18:46:56
@LastEditors  : Six
@LastEditTime : 2019-12-29 20:15:26
'''
import matplotlib.pyplot as plt
import numpy as np
import Dutils


def draw_step_curve(data):
    '''
    @description: 不同的step的趋势线
    @param {type} 
    @return: 
    @author: Six
    @Date: 2019-12-29 18:54:30
    '''
    for di in data:
        plt.plot(di)
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['step=6', 'step=10','step=14'], loc='lower right') 
    plt.show()

def acc_bar(data):
    '''
    @description: 方法效果图
    @param {type} 
    @return: 
    @author: Six
    @Date: 2019-12-29 18:55:40
    '''
    
    desc_list = ['Behavior','Behavior+Sequence','Behavior+Sequence+Payload']
    x = np.arange(len(desc_list))
    total_width, n = 0.5, 2
    width = total_width / n
    x = x - (total_width - width) / 2
    plt.bar(x+width, data[0], width=width, label='CSIC 2010')
    plt.bar(x, data[1], width=width, label='ADFA')
    plt.plot(x[:2], data[1][:2],'g')
    plt.plot(x+width, data[0],'r')
    # x+width/2
    plt.xticks([0,1,2.125],desc_list)


    for a,b in zip(x+width, data[0]):  
        plt.text(a, b+0.005, '%.4f' % b, ha='center', va= 'bottom',fontsize=8)  
    for a,b in zip(x, data[1]):
        if b!=0:  
            plt.text(a, b+0.005, '%.4f' % b, ha='center', va= 'bottom',fontsize=8)
    plt.legend(loc=0, bbox_to_anchor=(1.05,0.6),borderaxespad = 0.) 
    plt.tight_layout()
    plt.show()

def compare_bar(data):
    desc_list = ["LogisticsRegression","SVM","KNN","NaiveBayesian","OurMethod"]
    x = np.arange(len(desc_list))
    plt.bar(x,data,width = 0.5,label='CSIC 2010')
    plt.xticks(x,desc_list)
    plt.legend()
    plt.show()



if __name__ == "__main__":
    # data = [
    #     [0.8478773622392858, 0.9386792475322507, 0.976022017451952, 0.9870283056355122, 0.9830974884003213, 0.9952830196176685, 0.9948899378566622, 0.9917452841434838, 0.996069182764809, 0.9929245301762467, 0.9952830196176685, 0.9960691831396811, 0.996069182764809, 0.997248428047828, 0.996069182764809, 0.9968553462868217, 0.9968553462868217, 0.9968553462868217, 0.9968553462868217, 0.9960691831396811, 0.99213836777885, 0.996069182764809, 0.9984276729559748, 0.9964622645258153, 0.9968553462868217, 0.997248428047828, 0.9968553462868217, 0.9980345915698405, 0.997248428047828, 0.9968553466616936, 0.997248428047828, 0.996069182764809, 0.997248428047828, 0.9964622645258153, 0.9968553462868217, 0.997248428047828, 0.997248428047828, 0.997248428047828, 0.9964622645258153, 0.997248428047828, 0.997248428047828, 0.997248428047828, 0.997248428047828, 0.997248428047828, 0.9964622645258153, 0.9968553462868217, 0.9952830196176685, 0.997248428047828, 0.9976415098088343, 0.996069182764809],
    #     [0.7969875493780335, 0.827111988771797, 0.844793712031084, 0.8644400746430457, 0.8670595976442937, 0.8821218143355714, 0.8886705907872867, 0.8893254832575036, 0.8893254832575036, 0.9292730785071966, 0.9056974548331724, 0.8952193900737875, 0.8958742673208141, 0.8919449942363347, 0.9227242872226293, 0.8965291401570188, 0.9070071989051953, 0.924034055339486, 0.8998035315836499, 0.9377865023135202, 0.9607072683745299, 0.9679109312852536, 0.9796987613510602, 0.9738048365011509, 0.9692206905804667, 0.9679109312852536, 0.9698755754390884, 0.9417157830095947, 0.8893254652238782, 0.906352329269764, 0.9515389749327748, 0.9318925910864145, 0.9639816582007742, 0.9711853271227064, 0.9567780013012589, 0.9633267913757779, 0.9783890036562337, 0.9633267777529744, 0.8991486495354633, 0.9030779230102809, 0.9600523895271167, 0.968565817744262, 0.9652914158956006, 0.9751146018075725, 0.9751146018075725, 0.9823182647182962, 0.9888670563932018, 0.9927963250668593, 0.9862475394031622, 0.9796987613510602],
    #     [0.766269477434272, 0.8496791915976597, 0.8496791915976597, 0.8707607710284995, 0.8707607710284995, 0.8735105418809284, 0.8872593953782107, 0.8991750690720696, 0.9000916578264875, 0.9395050406455994, 0.9101741509520603, 0.9092575606679173, 0.9028414286789164, 0.9065077898154884, 0.9129239247000404, 0.9275893669517405, 0.9000916578264875, 0.9523373067542897, 0.9321723183724555, 0.935838681639716, 0.9560036678908617, 0.9835013748854262, 0.9725022922405729, 0.9440879920663143, 0.9761686541420074, 0.9660861610164345, 0.9899175068744271, 0.9807516040329972, 0.960586618546714, 0.9844179651695693, 0.9725022922405729, 0.9752520630930018, 0.9890009165902841, 0.9853345554537122, 0.9880843263061412, 0.9880843263061412, 0.9871677360219981, 0.9761686526122824, 0.9862511457378552, 0.9541704844270247, 0.9789184242295738, 0.9477543554974739, 0.9706691124371495, 0.9798350137488543, 0.9807516055627223, 0.9853345554537122, 0.9890009165902841, 0.9844179651695693, 0.9890009165902841, 0.9880843263061412],
    # ]
    # draw_step_curve(data)
    # data = [[0.8893,0.9885,0.9951],
    #         [0.9499,0.9819,0]
    # ]
    # acc_bar(data)

    # 7分类问题，混淆矩阵
    # data =[[534 , 1  , 1  , 0 ,  1 ,  2,1],
    # [  1 , 41 ,  2  , 0  , 4  , 3 , 19],
    # [  3  , 5 , 45 ,  3 ,  1 ,  1 , 25],
    # [  3 ,  0  , 4 ,115 ,  6 , 10 ,  3],
    # [  1 , 16  , 1 ,  4 , 70 , 13  , 6],
    # [  3  , 5 , 2  , 4 , 19 , 21  , 6],
    # [  2 ,  3 ,  7 ,  5 , 14,   7 , 59]]
    # Dutils.plot_confusion_matrix(np.array(data),range(7))

    # 一般方法对比
    data = [0.73,0.921,0.909,0.502,0.9987]
    compare_bar(data)




